# 200. 岛屿数量
# 给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。

# 岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。

# 此外，你可以假设该网格的四条边均被水包围。

# 示例 1：

# 输入：grid = [
#   ["1","1","1","1","0"],
#   ["1","1","0","1","0"],
#   ["1","1","0","0","0"],
#   ["0","0","0","0","0"]
# ]
# 输出：1
# 示例 2：

# 输入：grid = [
#   ["1","1","0","0","0"],
#   ["1","1","0","0","0"],
#   ["0","0","1","0","0"],
#   ["0","0","0","1","1"]
# ]
# 输出：3

def numIslands(self, grid):
    # 初始化行列
    r, c = len(grid), len(grid[0])


    def dfs(i,j):
        # 先判空
        # 这里判断五大条件，行大行小，列大列小，非一
        if i < 0 or i > r - 1 or j < 0 or j > c - 1 or grid[i][j] != '1':
            return 
        # 更改0为1
        grid[i][j] = '0'
        # 上上
        dfs(i-1,j)
        # 下下
        dfs(i+1,j)
        # 左左
        dfs(i,j-1)
        # 右右
        dfs(i,j+1)
        return 
    
    # 开始累积ans
    ans = 0
    # 遍历grid
    for i, row in enumerate(grid):
        for j, col in enumerate(row):
            # 触发dfs，消除附近的岛屿
            if grid[i][j] == "1":
                dfs(i,j)
                ans += 1
    return ans

grid = [
    ["1","1","1","1","0"],
    ["1","1","0","1","0"],
    ["1","1","0","0","0"],
    ["0","0","0","1","0"]
    ]
print(numIslands(None, grid)) # 2

grid = [
    ["1","1","0","0","0"],
    ["1","1","0","0","0"],
    ["0","0","1","0","0"],
    ["0","0","0","1","1"]
    ]
print(numIslands(None, grid)) # 3

        