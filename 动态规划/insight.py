# 思维，试图在最简单的例题上获取对于动态规划的洞见
# 我能想到一个例子是数字的递增
# 1，2，3，4，5
# i = 0
# i += 1
# l = []
n = int(input()) #获取层数
l = [0] * (n + 1) #制造空间
l[0] = [0] #初始化
for i in range(1, n + 1): #填入
    l[i] = l[i - 1] + 1 #填入规则
print(l[n]) #获取结果

# 那么，我们为什么要获取层数？
# 本质是因为我们需要根据层数制造一个空间
# 同样的，我们为什么需要制造一个空间？
# 因为我们的后续数据是需要前列数据存贮的，由此我们不得不把他们存在一个空间里，方便我们再次提取。
# 那么，我们该如何填入和初始化？
# 很清晰的逻辑是，填入和初始化是一种对于状态的确定，在这一过程中我们僵死了局部。
# 因此我们对于填入和初始化顺序的处理必须是审慎的。
# 填入和初始化顺序彼此之间是针锋相对的。
# 因为，初始化后如果再尝试填入，会导致覆盖从而冲突的情况出现。
# 再进一步讲，这跟填入规则有莫大的关联。
# 因为，一个填入的规则决定着填入的顺序。
# 由此可见，动态规划的核心在于填入规则，得到填入规则后，我们可以着手开始处理其他较为简单的步骤。
# 在处理题目时，我们最困难的题目方式不过是二维。
# 由此可见，这是可以在人的脑海中，展开一幅清晰的图画的。
# 我们是沿着一条小路，缓慢却坚定地向前行走的。
